const pool = require("../config/db");
const jwt = require("jsonwebtoken");
require("dotenv").config();

// ‚úÖ ƒêƒÉng nh·∫≠p admin duy nh·∫•t
exports.login = async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    try {
        console.log("üì© Nh·∫≠n request login:", email);

        // ‚úÖ Query b·∫±ng async/await v√¨ pool l√† promise-based
        const [rows] = await pool.query("SELECT * FROM users WHERE email = ?", [email]);

        if (rows.length === 0) {
            console.warn("‚ö†Ô∏è Email kh√¥ng t·ªìn t·∫°i:", email);
            return res.status(401).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        const admin = rows[0];

        // ‚úÖ So s√°nh m·∫≠t kh·∫©u
        if (password !== admin.password) {
            console.warn("‚ö†Ô∏è Sai m·∫≠t kh·∫©u cho:", email);
            return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });
        }

        console.log(`‚úÖ Admin ${admin.name} ƒëƒÉng nh·∫≠p th√†nh c√¥ng`);

        // ‚úÖ T·∫°o JWT Token (h·∫øt h·∫°n 1 gi·ªù)
        const token = jwt.sign(
            { id: admin.id, email: admin.email },
            process.env.JWT_SECRET || "supersecretkey",
            { expiresIn: "1h" }
        );

        // ‚úÖ Tr·∫£ response k√®m token
        return res.json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            user: {
                id: admin.id,
                name: admin.name,
                email: admin.email,
            },
            accessToken: token,
        });

    } catch (err) {
        console.error("‚ùå L·ªói trong login:", err.message);
        return res.status(500).json({ message: "L·ªói server", error: err.message });
    }
};
