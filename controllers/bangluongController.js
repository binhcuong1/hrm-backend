const ExcelJS = require("exceljs");
const PDFDocument = require("pdfkit");
const nodemailer = require("nodemailer");
const fs = require("fs");
const path = require("path");
const db = require("../config/db");
const BangLuong = require("../models/bangluongModel");

// ========================
// 1Ô∏è‚É£ T√≠nh l∆∞∆°ng t·∫•t c·∫£ nh√¢n vi√™n
// ========================
exports.calcAll = async (req, res) => {
    const { thang, nam } = req.body;
    try {
        const [nhanviens] = await db.query(`SELECT ma_nhan_vien FROM nhan_vien`);
        const results = [];
        for (const nv of nhanviens) {
            try {
                const data = await BangLuong.calcSalary(nv.ma_nhan_vien, thang, nam);
                results.push({ ...data, status: "OK" });
            } catch (err) {
                results.push({ ma_nhan_vien: nv.ma_nhan_vien, error: err.message });
            }
        }
        res.json({ success: true, message: "T√≠nh l∆∞∆°ng ho√†n t·∫•t", data: results });
    } catch (e) {
        res.status(500).json({ success: false, message: e.message });
    }
};

// ========================
// 2Ô∏è‚É£ L·∫•y danh s√°ch b·∫£ng l∆∞∆°ng th√°ng
// ========================
exports.getByMonth = async (req, res) => {
    const { thang, nam } = req.params;
    try {
        const [rows] = await db.query(
            `
      SELECT 
        nv.ma_nhan_vien,
        nv.ten_nhan_vien,
        pb.ten_phong_ban,
        (bl.luong_theo_ngay_cong + bl.tong_phu_cap + bl.tong_thuong + bl.tien_lam_them) AS tong_luong,
        (bl.tong_phat + bl.tong_tam_ung) AS khau_tru,
        bl.thuc_linh,
        bl.da_chot
      FROM bang_luong bl
      JOIN nhan_vien nv ON nv.ma_nhan_vien = bl.ma_nhan_vien
      JOIN phong_ban pb ON pb.ma_phong_ban = nv.ma_phong_ban
      WHERE bl.thang=? AND bl.nam=?
      ORDER BY nv.ten_nhan_vien ASC
    `,
            [thang, nam]
        );
        res.json({ success: true, thang, nam, data: rows });
    } catch (e) {
        res.status(500).json({ success: false, message: e.message });
    }
};

// ========================
// 3Ô∏è‚É£ L·∫•y chi ti·∫øt l∆∞∆°ng 1 nh√¢n vi√™n
// ========================
exports.getPayrollDetail = async (req, res) => {
    const { nhanvien, thang, nam } = req.params;
    try {
        const [[luong]] = await db.query(
            `
      SELECT 
        nv.ten_nhan_vien,
        pb.ten_phong_ban,
        cv.ten_chuc_vu,
        bl.*
      FROM bang_luong bl
      JOIN nhan_vien nv ON nv.ma_nhan_vien = bl.ma_nhan_vien
      JOIN phong_ban pb ON pb.ma_phong_ban = nv.ma_phong_ban
      JOIN chuc_vu cv ON cv.ma_chuc_vu = nv.ma_chuc_vu
      WHERE bl.ma_nhan_vien=? AND bl.thang=? AND bl.nam=?`,
            [nhanvien, thang, nam]
        );

        const [thuongPhat] = await db.query(
            `
      SELECT DATE_FORMAT(ngay, '%d/%m/%Y') AS ngay, loai_tp, so_tien, ly_do
      FROM thuong_phat
      WHERE ma_nhan_vien=? AND MONTH(ngay)=? AND YEAR(ngay)=?
    `,
            [nhanvien, thang, nam]
        );

        res.json({ success: true, data: { ...luong, thuong_phat: thuongPhat } });
    } catch (e) {
        res.status(500).json({ success: false, message: e.message });
    }
};

// ========================
// 4Ô∏è‚É£ Ch·ªët l∆∞∆°ng th√°ng
// ========================
exports.lockMonth = async (req, res) => {
    const { thang, nam } = req.body;
    try {
        await db.query(`UPDATE bang_luong SET da_chot=1 WHERE thang=? AND nam=?`, [
            thang,
            nam,
        ]);
        res.json({ success: true, message: `ƒê√£ ch·ªët l∆∞∆°ng th√°ng ${thang}/${nam}` });
    } catch (e) {
        res.status(500).json({ success: false, message: e.message });
    }
};

// ===========================
// üì§ EXPORT B·∫¢NG L∆Ø∆†NG (EXCEL)
// ===========================
exports.exportPayroll = async (req, res) => {
    try {
        const { thang, nam } = req.query;
        const thangNum = parseInt(thang);
        const namNum = parseInt(nam);

        // ‚úÖ L·∫•y d·ªØ li·ªáu b·∫£ng l∆∞∆°ng join th√¥ng tin nh√¢n vi√™n
        const [rows] = await db.query(
            `
      SELECT 
        bl.*, 
        nv.ten_nhan_vien, 
        cv.ten_chuc_vu, 
        pb.ten_phong_ban
      FROM bang_luong bl
      JOIN nhan_vien nv ON bl.ma_nhan_vien = nv.ma_nhan_vien
      JOIN chuc_vu cv ON nv.ma_chuc_vu = cv.ma_chuc_vu
      JOIN phong_ban pb ON nv.ma_phong_ban = pb.ma_phong_ban
      WHERE bl.thang = ? AND bl.nam = ?
      ORDER BY pb.ten_phong_ban, nv.ten_nhan_vien
    `,
            [thangNum, namNum]
        );

        if (!rows.length)
            return res
                .status(404)
                .json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu b·∫£ng l∆∞∆°ng cho th√°ng/nƒÉm n√†y." });

        // ‚úÖ T·∫°o th∆∞ m·ª•c exports n·∫øu ch∆∞a c√≥
        const exportDir = path.join(__dirname, "../exports");
        if (!fs.existsSync(exportDir)) {
            fs.mkdirSync(exportDir, { recursive: true });
        }

        // ‚úÖ T·∫°o workbook + worksheet
        const workbook = new ExcelJS.Workbook();
        const sheet = workbook.addWorksheet(`Luong_${thang}_${nam}`);

        // üß≠ Ti√™u ƒë·ªÅ
        sheet.mergeCells("A1:H1");
        sheet.getCell("A1").value = `B·∫¢NG L∆Ø∆†NG TH√ÅNG ${thang}/${nam}`;
        sheet.getCell("A1").alignment = {
            horizontal: "center",
            vertical: "middle",
        };
        sheet.getCell("A1").font = {
            bold: true,
            size: 16,
            color: { argb: "004B8B" },
        };

        // üßæ Header
        const headers = [
            "STT",
            "H·ªç t√™n nh√¢n vi√™n",
            "Ch·ª©c v·ª•",
            "Ph√≤ng ban",
            "T·ªïng l∆∞∆°ng (‚Ç´)",
            "Kh·∫•u tr·ª´ (‚Ç´)",
            "Th·ª±c lƒ©nh (‚Ç´)",
        ];
        sheet.addRow(headers);

        // Format header
        const headerRow = sheet.getRow(2);
        headerRow.font = { bold: true, size: 12, color: { argb: "000000" } };
        headerRow.alignment = { horizontal: "center", vertical: "middle" };
        headerRow.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FFDCE6F1" },
        };

        // üìä Th√™m d·ªØ li·ªáu t·ª´ng nh√¢n vi√™n
        rows.forEach((r, index) => {
            // T√≠nh t·ªïng kh·∫•u tr·ª´ (ph·∫°t + t·∫°m ·ª©ng)
            const khauTru = (r.tong_phat || 0) + (r.tong_tam_ung || 0);

            sheet.addRow([
                index + 1,
                r.ten_nhan_vien,
                r.ten_chuc_vu,
                r.ten_phong_ban,
                r.tong_luong,
                -Math.abs(khauTru), // ‚úÖ hi·ªÉn th·ªã d·∫•u √¢m
                r.thuc_linh,
            ]);
        });

        // üìà ƒê·ªãnh d·∫°ng ti·ªÅn & border
        sheet.eachRow((row, rowIndex) => {
            row.eachCell((cell) => {
                cell.border = {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" },
                };
                cell.alignment = { vertical: "middle", horizontal: "center" };
            });

            // format ti·ªÅn
            if (rowIndex > 2) {
                row.getCell(5).numFmt = "#,##0 [$‚Ç´-vi-VN]";
                row.getCell(6).numFmt = "#,##0 [$‚Ç´-vi-VN]";
                row.getCell(7).numFmt = "#,##0 [$‚Ç´-vi-VN]";

                // ‚úÖ n·∫øu kh·∫•u tr·ª´ √¢m ‚Üí t√¥ m√†u ƒë·ªè
                const khauTruCell = row.getCell(6);
                if (khauTruCell.value < 0) {
                    khauTruCell.font = { color: { argb: "FFFF0000" }, bold: true };
                }
            }
        });

        // üßÆ D√≤ng t·ªïng c·ªông cu·ªëi b·∫£ng
        const totalRow = sheet.addRow([
            "",
            "",
            "",
            "T·ªïng c·ªông:",
            { formula: `SUM(E3:E${rows.length + 2})` },
            { formula: `SUM(F3:F${rows.length + 2})` },
            { formula: `SUM(G3:G${rows.length + 2})` },
        ]);
        totalRow.font = { bold: true };
        totalRow.getCell(4).alignment = { horizontal: "right" };
        totalRow.eachCell((cell) => {
            cell.border = {
                top: { style: "double" },
                bottom: { style: "double" },
                left: { style: "thin" },
                right: { style: "thin" },
            };
            cell.numFmt = "#,##0 [$‚Ç´-vi-VN]";
        });

        // üìè CƒÉn ch·ªânh ƒë·ªô r·ªông
        const widths = [8, 25, 20, 22, 18, 18, 18];
        widths.forEach((w, i) => (sheet.getColumn(i + 1).width = w));

        // ‚úÖ Ghi file
        const filePath = path.join(exportDir, `bangluong_${thang}_${nam}.xlsx`);
        await workbook.xlsx.writeFile(filePath);
        console.log("‚úÖ Xu·∫•t Excel:", filePath);

        // ‚úÖ T·∫£i v·ªÅ
        return res.download(filePath);
    } catch (err) {
        console.error("‚ùå exportPayroll error:", err);
        res.status(500).json({ message: "L·ªói khi xu·∫•t b·∫£ng l∆∞∆°ng." });
    }
};

exports.sendPayrollEmail = async (req, res) => {
    try {
        const { thang, nam } = req.body;

        // ‚úÖ L·∫•y d·ªØ li·ªáu l∆∞∆°ng t·ª´ng nh√¢n vi√™n
        const [rows] = await db.query(
            `
      SELECT 
        nv.email,
        nv.ten_nhan_vien,
        cv.ten_chuc_vu,
        pb.ten_phong_ban,
        bl.*
      FROM bang_luong bl
      JOIN nhan_vien nv ON bl.ma_nhan_vien = nv.ma_nhan_vien
      JOIN chuc_vu cv ON nv.ma_chuc_vu = cv.ma_chuc_vu
      JOIN phong_ban pb ON nv.ma_phong_ban = pb.ma_phong_ban
      WHERE bl.thang = ? AND bl.nam = ? AND nv.email IS NOT NULL
    `,
            [thang, nam]
        );

        if (!rows.length)
            return res.status(404).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ g·ª≠i email" });

        // ‚úÖ C·∫•u h√¨nh mail
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: process.env.MAIL_USER,
                pass: process.env.MAIL_PASS,
            },
        });

        // ‚úÖ G·ª≠i mail t·ª´ng nh√¢n vi√™n
        for (const r of rows) {
            // ‚úÖ L·∫•y s·ªë ng√†y c√¥ng th·ª±c t·∫ø
            // ‚úÖ L·∫•y s·ªë ng√†y c√¥ng th·ª±c t·∫ø t·ª´ b·∫£ng cham_cong (th√°ng/nƒÉm)
            const [[workdays]] = await db.query(
                `
  SELECT COALESCE(songaycong_thucte, 0) AS so_ngay_cong
  FROM cham_cong
  WHERE ma_nhan_vien = ? AND thang = ? AND nam = ?
  LIMIT 1
`,
                [r.ma_nhan_vien, thang, nam]
            );

            const soNgayCong = Number(workdays?.so_ngay_cong || 0);

            // N·∫øu bang_luong ƒë√£ c√≥ luong_theo_ngay_cong th√¨ d√πng lu√¥n cho kh·ªõp s·ªï l∆∞∆°ng
            const luongTheoCong =
                r.luong_theo_ngay_cong != null
                    ? Number(r.luong_theo_ngay_cong)
                    : (Number(r.luong_co_so || 0) / 26) * soNgayCong;

            // ‚úÖ L·∫•y chi ti·∫øt th∆∞·ªüng/ph·∫°t
            const [tp] = await db.query(
                `
  SELECT loai_tp, so_tien, ly_do, DATE_FORMAT(ngay, '%d/%m/%Y') AS ngay
  FROM thuong_phat
  WHERE ma_nhan_vien = ? AND MONTH(ngay) = ? AND YEAR(ngay) = ?
`,
                [r.ma_nhan_vien, thang, nam]
            );

            // ‚úÖ L·∫•y chi ti·∫øt ph·ª• c·∫•p
            const [pc] = await db.query(
                `
  SELECT pc.ten_phu_cap, pc.so_tien, DATE_FORMAT(ct.ngay_bat_dau, '%d/%m/%Y') AS ngay_bat_dau
  FROM ct_phu_cap ct
  JOIN phu_cap pc ON ct.ma_phu_cap = pc.ma_phu_cap
  WHERE ct.ma_nhan_vien = ?
`,
                [r.ma_nhan_vien]
            );

            // format ti·ªÅn
            const fmt = (n) =>
                Number(n || 0).toLocaleString("vi-VN", {
                    style: "currency",
                    currency: "VND",
                });

            // ===== HTML email (ƒë√É b·ªè B·∫£o hi·ªÉm 10.5%) =====
            const html = `
<div style="font-family: Arial, sans-serif; line-height: 1.5; font-size: 14px;">
  <h2 style="text-align:center;">PHI·∫æU L∆Ø∆†NG</h2>
  <h3 style="text-align:center;">Th√°ng ${thang}/${nam}</h3>
  <table width="100%" style="margin-bottom:20px;">
    <tr><td><b>H·ªç v√† t√™n:</b></td><td>${r.ten_nhan_vien}</td></tr>
    <tr><td><b>M√£ nh√¢n vi√™n:</b></td><td>${r.ma_nhan_vien}</td></tr>
    <tr><td><b>Ph√≤ng ban:</b></td><td>${r.ten_phong_ban}</td></tr>
    <tr><td><b>Ch·ª©c v·ª•:</b></td><td>${r.ten_chuc_vu}</td></tr>
    <tr><td><b>Email:</b></td><td>${r.email}</td></tr>
  </table>

  <h4 style="background:#004b8b;color:white;padding:6px;">N·ªòI DUNG CHI TI·∫æT</h4>
  <table border="1" cellspacing="0" cellpadding="6" width="100%" style="border-collapse:collapse;">
    <tr style="background-color:#f2f2f2;font-weight:bold;">
      <td>M·ª•c</td><td align="right">S·ªë ti·ªÅn (‚Ç´)</td>
    </tr>
    <tr><td>L∆∞∆°ng c∆° b·∫£n theo ng√†y c√¥ng (${soNgayCong} ng√†y)</td><td align="right">${fmt(
                luongTheoCong
            )}</td></tr>
    <tr><td>T·ªïng ph·ª• c·∫•p</td><td align="right">${fmt(r.tong_phu_cap)}</td></tr>
    <tr><td>T·ªïng th∆∞·ªüng</td><td align="right">${fmt(r.tong_thuong)}</td></tr>
    <tr><td>T·ªïng ph·∫°t</td><td align="right">${fmt(r.tong_phat)}</td></tr>
    <tr><td>T·ªïng t·∫°m ·ª©ng</td><td align="right">${fmt(r.tong_tam_ung)}</td></tr>
    <tr style="background-color:#e8ffe8;font-weight:bold;">
      <td>Th·ª±c l√£nh</td>
      <td align="right" style="color:green;">${fmt(r.thuc_linh)}</td>
    </tr>
  </table>

  ${tp.length
                    ? `
  <h4>Chi ti·∫øt th∆∞·ªüng / ph·∫°t:</h4>
  <table border="1" cellspacing="0" cellpadding="6" width="100%" style="border-collapse:collapse;margin-bottom:20px;">
    <tr style="background:#f2f2f2;font-weight:bold;">
      <td>Lo·∫°i</td><td>L√Ω do</td><td align="right">S·ªë ti·ªÅn</td><td>Ng√†y</td>
    </tr>
    ${tp
                        .map(
                            (t) =>
                                `<tr><td>${t.loai_tp}</td><td>${t.ly_do || ""
                                }</td><td align="right">${fmt(t.so_tien)}</td><td>${t.ngay}</td></tr>`
                        )
                        .join("")}
  </table>`
                    : ""
                }

  ${pc.length
                    ? `
  <h4>Chi ti·∫øt ph·ª• c·∫•p:</h4>
  <table border="1" cellspacing="0" cellpadding="6" width="100%" style="border-collapse:collapse;">
    <tr style="background:#f2f2f2;font-weight:bold;">
      <td>T√™n ph·ª• c·∫•p</td><td align="right">S·ªë ti·ªÅn</td><td>Ng√†y b·∫Øt ƒë·∫ßu</td>
    </tr>
    ${pc
                        .map(
                            (p) =>
                                `<tr><td>${p.ten_phu_cap}</td><td align="right">${fmt(
                                    p.so_tien
                                )}</td><td>${p.ngay_bat_dau}</td></tr>`
                        )
                        .join("")}
  </table>`
                    : ""
                }

  <p style="margin-top:20px;font-style:italic;">
    Vui l√≤ng ph·∫£n h·ªìi email n√†y n·∫øu c√≥ sai s√≥t tr∆∞·ªõc <b>18h00 ng√†y ${new Date().getDate() + 2
                }/${thang}/${nam}</b>.<br>
    Nh√¢n vi√™n kh√¥ng ƒë∆∞·ª£c th·∫£o lu·∫≠n v·ªÅ l∆∞∆°ng v·ªõi ƒë·ªìng nghi·ªáp.
  </p>

  <p>Tr√¢n tr·ªçng,<br><b>Ph√≤ng nh√¢n s·ª±</b></p>
</div>`;

            // ‚úÖ G·ª≠i mail
            const mailOptions = {
                from: `"Ph√≤ng nh√¢n s·ª±" <${process.env.MAIL_USER}>`,
                to: r.email,
                subject: `B·∫£ng l∆∞∆°ng th√°ng ${thang}/${nam}`,
                html,
            };

            await transporter.sendMail(mailOptions);
            console.log(`üìß ƒê√£ g·ª≠i b·∫£ng l∆∞∆°ng cho: ${r.ten_nhan_vien}`);
        }

        res.json({
            success: true,
            message: "ƒê√£ g·ª≠i email chi ti·∫øt cho nh√¢n vi√™n.",
        });
    } catch (err) {
        console.error("‚ùå sendPayrollEmail error:", err);
        res.status(500).json({ message: "L·ªói khi g·ª≠i email chi ti·∫øt." });
    }
};